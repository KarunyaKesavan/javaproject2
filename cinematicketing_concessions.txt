package cinematicketing_concessions;
import java.util.*;
class Movie {
    private String title;
    private int duration;
    public Movie(String title, int duration) {
        this.title = title;
        this.duration = duration;
    }
    public String getTitle() {
        return title;
    }
    public String toString() {
        return title + " (" + duration + " mins)";
    }
}

class Seat {
    private String seatNumber;
    private boolean isBooked = false;
    public Seat(String seatNumber) {
        this.seatNumber = seatNumber;
    }
    public boolean isBooked() {
        return isBooked;
    }
    public void book() {
        isBooked = true;
    }
    public void cancel() {
        isBooked = false;
    }	
 
 public String getSeatNumber() {
        return seatNumber;
    }
    public String toString() {
        return seatNumber + (isBooked ? " [Booked]" : " [Available]");
    }
}

class Screen {
    private int screenNumber;
    private List<Seat> seats = new ArrayList<>();
    public Screen(int screenNumber) {
        this.screenNumber = screenNumber;
        for (int i = 1; i <= 10; i++) {
            seats.add(new Seat("S" + i));
        }
    }
    public List<Seat> getSeats() {
        return seats;
    }
    public int getScreenNumber() {
        return screenNumber;
    }
}

class Show {
    private Movie movie;
    private Screen screen;
    private String showTime;
    public Show(Movie movie, Screen screen, String showTime) {
        this.movie = movie;
        this.screen = screen;
        this.showTime = showTime;
    }   
 public List<Seat> getAvailableSeats() {
        List<Seat> available = new ArrayList<>();
        for (Seat seat : screen.getSeats()) {
            if (!seat.isBooked()) available.add(seat);
        }
        return available;
    }
    public String toString() {
        return movie + " at " + showTime + " on Screen " + screen.getScreenNumber();
    }
    public Movie getMovie() {
        return movie;
    }
    public Screen getScreen() {
        return screen;
    }
    public String getShowTime() {
        return showTime;
    }
}

class Customer {
    private String name;
    public Customer(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
}

class Booking {
    private Customer customer;
    private Show show;  
    private List<Seat> seats;
    private boolean isPaid = false;
    public Booking(Customer customer, Show show, List<Seat> seats) {
        this.customer = customer;
        this.show = show;
        this.seats = seats;
    }
    public void confirmPayment() {
        isPaid = true;
        for (Seat seat : seats) {
            seat.book();
        }
    }
    public void cancel() {
        for (Seat seat : seats) {
            seat.cancel();
        }
    }
    public String getDetails() {
        return "Booking for " + customer.getName() + "\nShow: " + show + "\nSeats: " + seats + "\nTotal: $" + (seats.size() * 10);
    }
}

class ConcessionOrder {
    private Map<String, Integer> items = new HashMap<>();
    private Booking booking;
    public ConcessionOrder(Booking booking) {
        this.booking = booking;
    }
    public void addItem(String item, int qty) {
        items.put(item, qty);
    }
  
  public double calculateTotal() {
        double total = 0;
        for (String item : items.keySet()) {
            total += items.get(item) * 5; 
        }
        return total;
    }
    public String getReceipt() {
        return "Concession Items: " + items + "\nTotal: $" + calculateTotal();
    }
}

public class CinemaApp {
    static Scanner sc = new Scanner(System.in);
    static List<Movie> movies = new ArrayList<>();
    static List<Show> shows = new ArrayList<>();
    static List<Customer> customers = new ArrayList<>();
    static List<Booking> bookings = new ArrayList<>();
    public static void main(String[] args) {
        while (true) {
            System.out.println("\n--- Cinema Ticketing System ---");
            System.out.println("1. Add Movie");
            System.out.println("2. Schedule Show");
            System.out.println("3. Add Customer");
            System.out.println("4. Book Seats");
            System.out.println("5. Cancel Booking");
            System.out.println("6. Order Concessions");
            System.out.println("7. Display Shows & Availability");
            System.out.println("8. Exit");
            System.out.print("Select option: ");
            int choice = sc.nextInt();
            sc.nextLine(); // consume newline
           

            switch (choice) {
                case 1 -> addMovie();
                case 2 -> scheduleShow();
                case 3 -> addCustomer();
                case 4 -> bookSeats();
                case 5 -> cancelBooking();
                case 6 -> orderConcessions();
                case 7 -> displayShows();
                case 8 -> {
                    System.out.println("Thank you for using the system!");
                    return;
                }
                default -> System.out.println("Invalid choice!");
            }
        }
    }

    static void addMovie() {
        System.out.print("Enter movie title: ");
        String title = sc.nextLine();
        System.out.print("Enter duration in minutes: ");
        int duration = sc.nextInt();
        movies.add(new Movie(title, duration));
        System.out.println("Movie added.");
    }

    static void scheduleShow() {
        if (movies.isEmpty()) {
            System.out.println("Add movies first.");
            return;
        }
        for (int i = 0; i < movies.size(); i++)
            System.out.println((i + 1) + ". " + movies.get(i));
       
        System.out.print("Select movie: ");
        int movieIdx = sc.nextInt() - 1;
        sc.nextLine();
        System.out.print("Enter show time (e.g. 6:00PM): ");
        String time = sc.nextLine();
        Screen screen = new Screen(shows.size() + 1);
        Show show = new Show(movies.get(movieIdx), screen, time);
        shows.add(show);
        System.out.println("Show scheduled.");
    }

    static void addCustomer() {
        System.out.print("Enter customer name: ");
        String name = sc.nextLine();
        customers.add(new Customer(name));
        System.out.println("Customer added.");
    }

    static void bookSeats() {
        if (customers.isEmpty() || shows.isEmpty()) {
            System.out.println("Add customers and shows first.");
            return;
        }
        for (int i = 0; i < customers.size(); i++)
            System.out.println((i + 1) + ". " + customers.get(i).getName());
        System.out.print("Select customer: ");
        int custIdx = sc.nextInt() - 1;
        for (int i = 0; i < shows.size(); i++)
            System.out.println((i + 1) + ". " + shows.get(i));
        System.out.print("Select show: ");
        int showIdx = sc.nextInt() - 1;
        Show show = shows.get(showIdx);
        List<Seat> available = show.getAvailableSeats();
       
        if (available.isEmpty()) {
            System.out.println("No seats available.");
            return;
        }
        System.out.println("Available seats:");
        for (Seat seat : available)
            System.out.print(seat.getSeatNumber() + " ");
        System.out.println();
        System.out.print("Enter number of seats to book: ");
        int count = sc.nextInt();
        List<Seat> selectedSeats = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            System.out.print("Enter seat number: ");
            String seatNum = sc.next();
            Seat seat = show.getScreen().getSeats().stream()
                    .filter(s -> s.getSeatNumber().equals(seatNum) && !s.isBooked())
                    .findFirst().orElse(null);
            if (seat != null) {
                selectedSeats.add(seat);
            } else {
                System.out.println("Invalid or already booked.");
            }
        }
        Booking booking = new Booking(customers.get(custIdx), show, selectedSeats);
        // Confirm payment before finalizing
        System.out.print("Confirm payment of $" + (selectedSeats.size() * 10) + "? (yes/no): ");
        String confirm = sc.next();
        if (confirm.equalsIgnoreCase("yes")) {
            booking.confirmPayment();
            bookings.add(booking);
            System.out.println("Booking confirmed!");
            System.out.println(booking.getDetails());
        } else {
           
             System.out.println("Booking cancelled.");
        }
    }

    static void cancelBooking() {
        if (bookings.isEmpty()) {
            System.out.println("No bookings found.");
            return;
        }
        for (int i = 0; i < bookings.size(); i++) {
            System.out.println((i + 1) + ". " + bookings.get(i).getDetails());
        }
        System.out.print("Select booking to cancel: ");
        int index = sc.nextInt() - 1;
        if (index >= 0 && index < bookings.size()) {
            Booking booking = bookings.get(index);
            booking.cancel();
            bookings.remove(index);
            System.out.println("Booking cancelled and seats released.");
        } else {
            System.out.println("Invalid selection.");
        }
    }

    static void orderConcessions() {
        Booking linkedBooking = null;
        System.out.print("Link to a booking? (yes/no): ");
        String link = sc.next();
        if (link.equalsIgnoreCase("yes")) {
            if (bookings.isEmpty()) {
                System.out.println("No bookings to link.");
                return;
            }
            
            for (int i = 0; i < bookings.size(); i++) {
                System.out.println((i + 1) + ". " + bookings.get(i).getDetails());
            }
            System.out.print("Select booking: ");
            int idx = sc.nextInt() - 1;
            if (idx >= 0 && idx < bookings.size()) {
                linkedBooking = bookings.get(idx);
            } else {
                System.out.println("Invalid selection.");
                return;
            }
        }
        ConcessionOrder order = new ConcessionOrder(linkedBooking);
        while (true) {
            System.out.print("Enter item name (or 'done' to finish): ");
            String item = sc.next();
            if (item.equalsIgnoreCase("done")) break;
            System.out.print("Enter quantity: ");
            int qty = sc.nextInt();
            order.addItem(item, qty);
        }
        System.out.println("Concession Order Confirmed:");
        System.out.println(order.getReceipt());
    }

    static void displayShows() {
        if (shows.isEmpty()) {
            System.out.println("No shows scheduled.");
            return;
        }
        for (Show show : shows) {
            System.out.println("\nShow: " + show);
            

            List<Seat> seats = show.getScreen().getSeats();
            for (Seat seat : seats) {
                System.out.print(seat + " ");
            }
            System.out.println();
        }
    }
}
